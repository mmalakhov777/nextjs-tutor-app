'use client';

import React, { useState, useRef, useEffect } from 'react';
import { X, Send, Loader2, Square, Search, BookOpen, TrendingUp, Layers, ChevronDown } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { PlusIcon } from '@/components/icons/PlusIcon';
import { Textarea } from '@/components/ui/textarea';
import { MicrophoneIcon } from '@/components/icons/MicrophoneIcon';
import { blobToBase64 } from '@/utils/audioUtils';
import { speechToText } from '@/services/audioService';
import { toast } from 'react-hot-toast';
import { experimental_useObject as useObject } from '@ai-sdk/react';
import { ResponseSchema } from '@/app/api/scenarios/generate/schema'; // Import the schema
import { getAgentDescription } from '@/data/agentDescriptions';
import { GrokXLogo } from '@/components/icons/GrokXLogo';
import { TriageAgentLogo } from '@/components/icons/TriageAgentLogo';
import { ClaudeCreativeLogo } from '@/components/icons/ClaudeCreativeLogo';
import { DeepSeekLogo } from '@/components/icons/DeepSeekLogo';
import { MistralLogo } from '@/components/icons/MistralLogo';
import { PerplexityLogo } from '@/components/icons/PerplexityLogo';
import { UserCircle } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface CreateScenarioModalProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  onCreateScenario: (scenarioJsonString: string) => void; // Expects a JSON string of the scenarios array
}

export function CreateScenarioModal({ 
  isOpen, 
  onOpenChange, 
  onCreateScenario 
}: CreateScenarioModalProps) {
  const [userPrompt, setUserPrompt] = useState('');
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  const { 
    object,
    submit,
    isLoading,
    error,
    stop,
  } = useObject({
    api: '/api/scenarios/generate',
    schema: ResponseSchema, 
    // id: 'scenario-creation-' + Date.now(), // Optional: if you need a stable ID
    // initialValue: { scenarios: [] } // Optional: set an initial structure if needed
    onFinish: ({ object, error }) => {
      if (error) {
        toast.error(`Scenario generation failed: ${error.message}`);
      }
      // No need to set isGenerating to false here, isLoading from useObject handles it
    },
    onError: (err) => {
      toast.error(`API Error: ${err.message}`);
    }
  });

  // Audio recording states
  const [isRecording, setIsRecording] = useState(false);
  const [isTranscribing, setIsTranscribing] = useState(false);
  const [recordingError, setRecordingError] = useState<string | null>(null);
  
  // MediaRecorder references
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      const scrollHeight = textareaRef.current.scrollHeight;
      // Respect the max height of 240px
      textareaRef.current.style.height = `${Math.min(scrollHeight, 240)}px`;
    }
  }, [userPrompt]);

  // Handle scenario creation
  const handleCreateScenario = () => {
    if (userPrompt.trim()) {
      submit({ prompt: userPrompt }); // Pass prompt in the body object
    }
  };

  // Handle starting again - reset the form and clear generated scenarios
  const handleStartAgain = () => {
    setUserPrompt('');
    // Reset the object state to clear generated scenarios
    if (object) {
      // Clear the scenarios by resetting the object
      object.scenarios = [];
    }
    // Stop any ongoing generation
    stop();
  };

  // Handle key press
  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      if (userPrompt.trim()) {
        handleCreateScenario();
      }
    }
  };
  
  // Start recording
  const startRecording = async () => {
    try {
      let mimeType = null;
      const supportedMimeTypes = [
        'audio/mp4',  // Most compatible with Safari
        'audio/mpeg', // MP3 format
        'audio/wav',  // Uncompressed but widely supported
      ];

      for (const type of supportedMimeTypes) {
        if (MediaRecorder.isTypeSupported(type)) {
          mimeType = type;
          break;
        }
      }

      if (!mimeType) {
        throw new Error('No supported audio format found');
      }

      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          channelCount: 1,
          sampleRate: 16000,
        }
      });

      const mediaRecorder = new MediaRecorder(stream, {
        mimeType,
        audioBitsPerSecond: 128000
      });

      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });
        
        try {
          setIsTranscribing(true);
          const text = await speechToText(audioBlob);
          if (text) {
            setUserPrompt(text);
            setIsRecording(false);
            setIsTranscribing(false);
          } else {
             // Handle case where transcription is empty but stop recording
             setIsRecording(false);
             setIsTranscribing(false);
          }
        } catch (error) {
          toast.error('Failed to process audio. Please try again.');
          setIsRecording(false);
          setIsTranscribing(false);
        } finally {
           stream.getTracks().forEach(track => track.stop()); // Ensure stream is always stopped
        }
      };

      mediaRecorderRef.current = mediaRecorder;
      mediaRecorder.start(100);
      setIsRecording(true);
      setUserPrompt(''); // Clear input on record start
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      setRecordingError('Failed to start recording: ' + errorMessage);
      toast.error('Failed to start recording: ' + errorMessage); // Show toast on error
      setIsRecording(false); // Ensure recording state is reset on error
    }
  };
  
  // Stop recording
  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
      mediaRecorderRef.current.stop();
      // State changes (isRecording=false, isTranscribing=true) happen in onstop handler
    } else {
      // If stop is called when not recording (e.g., due to error)
      setIsRecording(false);
      setIsTranscribing(false);
      if (mediaRecorderRef.current?.stream) {
         mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());
      }
    }
  };
  
  // Handle recording toggle
  const toggleRecording = async () => {
    if (isRecording) {
      stopRecording();
    } else {
      await startRecording();
    }
  };
  
  // Cleanup
  useEffect(() => {
    return () => {
      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
        mediaRecorderRef.current.stop();
      }
      // Stop tracks explicitly on unmount if stream exists
       if (mediaRecorderRef.current?.stream) {
         mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  // Function to run the scenario and trigger first command
  const handleRunScenario = () => {
    if (object && object.scenarios && object.scenarios.length > 0) {
      try {
        // Log the scenario JSON being passed to AgentsSidebar
        const scenarioJson = JSON.stringify(object.scenarios);
        console.log('[CreateScenarioModal] Running scenario - JSON being passed to AgentsSidebar:');
        console.log(scenarioJson);
        console.log('[CreateScenarioModal] Parsed scenario object:');
        console.log(JSON.stringify(object.scenarios, null, 2));
        
        // Close the modal first to avoid any display issues
        onOpenChange(false);
        
        // Small delay to ensure modal is closed before triggering scenario
        setTimeout(() => {
          // Pass directly to parent component - we'll let AgentsSidebar handle the details
          console.log('[CreateScenarioModal] Calling onCreateScenario with JSON:', scenarioJson);
          onCreateScenario(scenarioJson);
        }, 100);
        
      } catch (e) {
        console.error('[CreateScenarioModal] Error in handleRunScenario:', e);
        toast.error('Unable to run scenario: Invalid format after generation.');
      }
    } else {
      console.error('[CreateScenarioModal] No scenario generated or scenario is empty:', {
        hasObject: !!object,
        hasScenarios: !!(object && object.scenarios),
        scenariosLength: object?.scenarios?.length || 0
      });
      toast.error('No scenario generated or scenario is empty.');
    }
  };
  
  const displayScenarios = object?.scenarios || [];
  const hasScenarios = displayScenarios.length > 0;
  const showHeaderContent = !isLoading && !hasScenarios;
  const hideHeaderCompletely = isLoading || hasScenarios;

  // Helper function to get agent icon
  const getAgentIcon = (agentName: string) => {
    switch(agentName) {
      case "General Assistant":
      case "Deep Thinker":
        return <TriageAgentLogo className="h-5 w-5" />;
      case "Grok X":
        return <GrokXLogo className="h-5 w-5" />;
      case "Mistral Europe":
        return <MistralLogo className="h-5 w-5" />;
      case "Claude Creative":
        return <ClaudeCreativeLogo className="h-5 w-5" />;
      case "Deep Seek":
        return <DeepSeekLogo className="h-5 w-5" />;
      case "Perplexity":
        return <PerplexityLogo className="h-5 w-5" />;
      case "SEO Agent":
        return <Search className="h-5 w-5" />;
      default:
        return <UserCircle className="h-5 w-5" />;
    }
  };

  // Helper function to get agent circle color
  const getAgentCircleColor = (agentName: string) => {
    switch(agentName) {
      case "General Assistant":
        return "bg-emerald-500"; // Green color
      case "Claude Creative":
        return "rounded-[1000px] border border-[#E8E8E5] bg-[#D77655]"; // Specific Claude Creative styling
      case "Deep Seek":
        return "rounded-[1000px] border border-[#E8E8E5] bg-[#4D6BFE]"; // Specific Deep Seek styling
      case "Mistral Europe":
        return "rounded-[1000px] border border-[#E8E8E5] bg-[#FA5310]"; // Specific Mistral Europe styling
      case "Perplexity":
        return "rounded-[1000px] border border-[#E8E8E5] bg-[#1F1F1F]"; // Specific Perplexity styling
      case "Deep Thinker":
        return "rounded-[1000px] border border-[#E8E8E5] bg-black"; // Deep Thinker styling with pure black
      case "Grok X":
        return "bg-black"; // Black color for the third icon
      case "SEO Agent":
        return "rounded-[1000px] border border-[#E8E8E5] bg-[#FF6B35]"; // Orange color for SEO Agent
      default:
        return "bg-white border border-slate-200";
    }
  };

  // Get icon color based on agent background color
  const getIconTextColor = (agentName: string) => {
    switch(agentName) {
      case "General Assistant":
      case "Claude Creative":
      case "Grok X":
      case "Deep Seek":
      case "Mistral Europe":
      case "Perplexity":
      case "Deep Thinker":
      case "SEO Agent":
        return "text-white"; // White text for dark backgrounds
      default:
        return "text-slate-800"; // Dark text for light backgrounds
    }
  };

  // Helper function to get short agent descriptions
  const getShortAgentDescription = (agentName: string) => {
    switch(agentName) {
      case "General Assistant":
        return "Handles general tasks";
      case "Claude Creative":
        return "Creative writing & ideas";
      case "Deep Thinker":
        return "Complex analysis";
      case "Perplexity":
        return "Research & facts";
      case "Grok X":
        return "Social media & trends";
      case "Mistral Europe":
        return "European culture & languages";
      case "Deep Seek":
        return "Chinese culture & business";
      case "SEO Agent":
        return "SEO & keyword analysis";
      default:
        return "AI assistant";
    }
  };

  // Example scenarios data
  const exampleScenarios = [
    {
      title: "Deep Research",
      description: "Multi-source analysis with insights",
      icon: BookOpen,
      prompt: "I need to conduct deep research on artificial intelligence's impact on education. The scenario should involve:\n• Gathering information from academic sources, industry reports, and expert opinions\n• Analyzing current trends and future predictions\n• Identifying key challenges and opportunities\n• Creating a comprehensive report with actionable recommendations\n• Target audience: Educational administrators and policy makers\n• Expected outcome: A well-researched strategic document for AI integration in schools"
    },
    {
      title: "SEO Article",
      description: "Optimized content that ranks",
      icon: TrendingUp,
      prompt: "Create an SEO article writing scenario focused on 'AI tools for small businesses'. The scenario should include:\n• Keyword research and competitive analysis\n• Content structure optimization for search engines\n• Writing engaging, informative content that converts\n• Meta descriptions and title optimization\n• Internal linking strategy\n• Target audience: Small business owners looking to implement AI\n• Expected outcome: A 2000-word article that ranks in top 10 for target keywords"
    },
    {
      title: "AI Video Flashcards",
      description: "YouTube → Learning cards",
      icon: Layers,
      prompt: "Create flashcards based on the most popular YouTube video about artificial intelligence. The scenario should involve:\n• Analyzing the video content and extracting key concepts\n• Creating question-answer pairs for active recall\n• Organizing information by difficulty and topic\n• Adding visual elements and examples where helpful\n• Target audience: Students and professionals learning about AI\n• Expected outcome: 50+ high-quality flashcards covering all major concepts from the video\n• Assessment: Self-testing with spaced repetition for long-term retention"
    }
  ];

  // Handle example card click
  const handleExampleClick = (prompt: string) => {
    setUserPrompt(prompt);
    // Focus the textarea after setting the text
    setTimeout(() => {
      if (textareaRef.current) {
        textareaRef.current.focus();
      }
    }, 100);
  };

  return (
    <>
      {isOpen && (
        <div className="fixed inset-0 z-50">
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-black/80 backdrop-blur-sm"
            onClick={() => onOpenChange(false)}
          />
          
          {/* Modal */}
          <div className="fixed inset-0 flex items-center justify-center p-4">
            <div 
              className="relative w-full max-w-4xl max-h-[90vh] bg-white rounded-2xl shadow-2xl overflow-hidden"
              style={{ 
                width: "900px",
                minHeight: "500px",
                maxHeight: "85vh"
              }}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Close button */}
              <button
                onClick={() => onOpenChange(false)}
                className="absolute right-6 top-6 z-10 rounded-sm opacity-70 hover:opacity-100 transition-opacity p-1"
              >
                <X className="h-5 w-5" />
                <span className="sr-only">Close</span>
              </button>

              {/* Modal content */}
              <div className="flex flex-col h-full w-full" style={{ padding: "32px" }}>
                {/* Add a visually hidden title for accessibility */}
                <h1 className="sr-only">Create a Scenario</h1>
                
                <style jsx global>{`
                  .highlight-text {
                    display: inline-block;
                    background-color: #e0f2fe;
                    padding: 4px 12px;
                    border-radius: 8px;
                  }
                `}</style>
                
                <div className="flex flex-col h-full w-full">
                  {/* Combined header and content area when not loading/showing scenarios */}
                  {!hideHeaderCompletely && !isLoading && !hasScenarios && !error && (
                    <div className="flex-1 flex flex-col items-center justify-center px-3 sm:px-6">
                      <div className="text-center max-w-2xl mx-auto mb-8">
                        <h1 className="text-2xl sm:text-4xl font-bold mb-3">
                          What will your <span className="highlight-text">Scenario</span> be about?
                        </h1>
                        <p className="text-sm sm:text-base text-gray-600 leading-relaxed">
                          Describe your learning scenario with specific goals, target audience, and desired outcomes. 
                          Our AI agents will create a structured, step-by-step plan tailored to your needs.
                        </p>
                      </div>
                      
                      {/* Form styled like screenshot */}
                      <div className="max-w-xl mx-auto w-full bg-[#f8f8f4] border border-gray-200 rounded-2xl overflow-hidden shadow-none">
                        <div className="p-4 pb-0">
                          <Textarea
                            id="scenario-description"
                            ref={textareaRef}
                            value={userPrompt}
                            onChange={(e) => setUserPrompt(e.target.value)}
                            onKeyDown={handleKeyPress}
                            disabled={isRecording || isTranscribing || isLoading}
                            placeholder={
                              isRecording ? "Recording..." : 
                              isTranscribing ? "Transcribing..." :
                              isLoading ? "Generating scenario..." :
                              "Describe your scenario:\n• Main topic and learning goals\n• Student background and challenges\n• Desired outcome and assessment"
                            }
                            className="w-full resize-none border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 scrollbar-hide text-gray-700"
                            style={{ 
                              minHeight: '160px',
                              maxHeight: '240px',
                              overflow: 'auto',
                              fontSize: '16px',
                              lineHeight: '1.6'
                            }}
                          />
                        </div>
                        
                        {/* Footer with controls */}
                        <div className="flex items-center justify-between gap-2 px-4 pb-3 pt-2">
                          {/* Examples dropdown on the left */}
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <button
                                disabled={isRecording || isTranscribing || isLoading}
                                className="flex items-center gap-1 text-xs text-gray-600 hover:text-gray-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              >
                                <span>Examples</span>
                                <ChevronDown className="h-3 w-3" />
                              </button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="start" className="w-80">
                              {exampleScenarios.map((example, index) => (
                                <DropdownMenuItem
                                  key={index}
                                  onClick={() => handleExampleClick(example.prompt)}
                                  className="flex items-start gap-3 p-3 cursor-pointer"
                                >
                                  <example.icon className="h-4 w-4 text-gray-500 mt-0.5 flex-shrink-0" />
                                  <div className="flex-1 min-w-0">
                                    <div className="font-medium text-sm mb-1">{example.title}</div>
                                    <div className="text-xs text-gray-500">{example.description}</div>
                                  </div>
                                </DropdownMenuItem>
                              ))}
                            </DropdownMenuContent>
                          </DropdownMenu>
                          
                          {/* Record button on the right */}
                          <button
                            onClick={toggleRecording}
                            disabled={isTranscribing || isLoading}
                            style={{
                              display: 'flex',
                              padding: '8px',
                              alignItems: 'center',
                              justifyContent: 'center',
                              borderRadius: '8px',
                              background: isRecording ? 'var(--Error-400, #EF4444)' : 'var(--Monochrome-Superlight, #F2F2ED)',
                              border: '1px solid #E8E8E5',
                              cursor: 'pointer',
                              opacity: (isTranscribing || isLoading) ? 0.5 : 1,
                              position: 'relative'
                            }}
                          >
                            {isTranscribing ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : isRecording ? (
                              <Square className="h-4 w-4 text-white" />
                            ) : (
                              <MicrophoneIcon className="h-4 w-4" />
                            )}
                            {isRecording && !isTranscribing && (
                              <span style={{ 
                                position: 'absolute',
                                fontSize: '12px', 
                                fontWeight: 500, 
                                color: 'white',
                                bottom: '-18px',
                                left: '50%',
                                transform: 'translateX(-50%)',
                                whiteSpace: 'nowrap'
                              }}>
                                Stop
                              </span>
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Main content area for loading and scenarios */}
                  {(hideHeaderCompletely || isLoading || hasScenarios || error) && (
                    <div className={`px-3 sm:px-6 overflow-y-auto flex-grow pt-2 modal-content-area`} 
                         data-hide-header={hideHeaderCompletely}>
                      {/* Loading state */}
                      {isLoading && displayScenarios.length === 0 && (
                        <div className="flex items-center justify-center h-full">
                          <div className="text-center">
                            <div className="animate-spin h-12 w-12 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
                            <span className="text-gray-600 text-lg">Generating your scenario...</span>
                          </div>
                        </div>
                      )}
                    
                      {/* Error state */}
                      {error && (
                       <div className="bg-red-50 text-red-700 p-4 rounded-lg border border-red-200 mb-6">
                         <p className="font-semibold mb-1">Error occurred</p>
                         <p>{error.message}</p>
                       </div>
                      )}
                    
                      {/* Generated scenarios display */}
                      {hasScenarios ? (
                        <div 
                          ref={scrollContainerRef}
                          className="scrollbar-hide overflow-auto h-full pb-6"
                          style={{
                            scrollBehavior: 'smooth'
                          }}
                        >
                          {/* Add some top spacing */}
                          <div className="h-3"></div>
                          {/* Add a flex container to hold the content and badge */}
                          <div className="flex flex-col lg:flex-row">
                            {/* Main content - full width on mobile, 70% on desktop */}
                            <div className="w-full lg:w-[70%] lg:pr-3">
                              <div className="space-y-8 mb-8">
                              {displayScenarios.map((scenario: any, idx: number) => {
                                const steps = scenario.steps && Array.isArray(scenario.steps)
                                  ? scenario.steps
                                  : scenario.actions && Array.isArray(scenario.actions)
                                    ? [{
                                        title: scenario.title,
                                        description: scenario.description,
                                      actions: scenario.actions
                                    }]
                                  : [];
                                    
                                    // Check if we need to show the title/description at the scenario level
                                    // Only show if there's more than one step or if they differ from the first step
                                    const hasMultipleSteps = steps.length > 1;
                                    const firstStepIsDifferent = steps.length === 1 && 
                                      (steps[0].title !== scenario.title || steps[0].description !== scenario.description);
                                    const showScenarioHeader = hasMultipleSteps || firstStepIsDifferent;
                                    
                                  return (
                                    <div key={idx} className="flex flex-col h-full">
                                        {showScenarioHeader && (
                                      <div className="mb-4">
                                        <div className="flex justify-between items-center mb-3">
                                              <h2 className="text-xl font-semibold">{scenario.title}</h2>
                                        </div>
                                        <p className="text-sm text-slate-600 mb-3">{scenario.description}</p>
                                      </div>
                                        )}
                                        
                                      {steps.length > 0 && (
                                        <div className="flex-grow overflow-y-auto space-y-4">
                                          {steps.map((step: any, stepIdx: number) => (
                                            <div 
                                              key={stepIdx}
                                                className="p-4 rounded-lg bg-white mb-4"
                                              style={{
                                                display: 'flex',
                                                flexDirection: 'column',
                                                alignItems: 'stretch',
                                                gap: '12px',
                                                alignSelf: 'stretch',
                                                borderRadius: '16px',
                                                border: '1px solid var(--Monochrome-Light, #E8E8E5)',
                                                background: '#FFF',
                                              }}
                                            >
                                              <div className="flex items-start w-full">
                                                <div 
                                                    className="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mr-3 text-sm font-medium text-slate-700"
                                                  style={{
                                                    width: '24px',
                                                    height: '24px',
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    justifyContent: 'center',
                                                    marginRight: '12px',
                                                    borderRadius: '1000px',
                                                    background: 'var(--Blue-Light, #C7EFFF)',
                                                    color: '#232323',
                                                    fontSize: '14px',
                                                    fontWeight: 500
                                                  }}
                                                >
                                                  {stepIdx + 1}
                                                </div>
                                                <div className="w-full flex-grow flex flex-col" style={{ width: '100%' }}>
                                                    <h4 className="font-medium text-slate-900">{step.title || `Step ${stepIdx + 1}`}</h4>
                                                    <p className="text-sm text-slate-600 mb-3">{step.description || ''}</p>
                                                    
                                                    {/* Move the cards here - only show in first step */}
                                                    {stepIdx === 0 && (
                                                      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3 mt-4">
                                                        {scenario.goal && (
                                                          <div className="bg-[#f8f8f3] rounded-lg p-3 border border-gray-200">
                                                            <div className="mb-1">
                                                              <h3 className="text-sm font-medium text-black">Goal</h3>
                                                            </div>
                                                            <p className="text-xs text-black">{scenario.goal}</p>
                                                          </div>
                                                        )}
                                                        
                                                        {scenario.metricsOfSuccess && (
                                                          <div className="bg-[#f8f8f3] rounded-lg p-3 border border-gray-200">
                                                            <div className="mb-1">
                                                              <h3 className="text-sm font-medium text-black">Metrics of Success</h3>
                                                            </div>
                                                            <p className="text-xs text-black">{scenario.metricsOfSuccess}</p>
                                                          </div>
                                                        )}
                                                        
                                                        {scenario.outcome && (
                                                          <div className="bg-[#f8f8f3] rounded-lg p-3 border border-gray-200">
                                                            <div className="mb-1">
                                                              <h3 className="text-sm font-medium text-black">Expected Outcome</h3>
                                                            </div>
                                                            <p className="text-xs text-black">{scenario.outcome}</p>
                                                          </div>
                                                        )}
                                                      </div>
                                                    )}
                                                    
                                                  {step.actions && Array.isArray(step.actions) && (
                                                    <div className="space-y-2 mt-3 w-full" style={{ width: '100%' }}>
                                                      {step.actions.map((action: any, actionIdx: number) => (
                                                        <div 
                                                          key={actionIdx}
                                                          className="text-left text-sm transition-colors text-[#232323]"
                                                          style={{
                                                            display: 'flex',
                                                            padding: '16px',
                                                            flexDirection: 'column',
                                                            alignItems: 'flex-start',
                                                            gap: '12px',
                                                            alignSelf: 'stretch',
                                                            width: '100%',
                                                            minWidth: '100%',
                                                            maxWidth: '100%',
                                                            borderRadius: '8px',
                                                            border: '1px solid var(--Monochrome-Light, #E8E8E5)',
                                                            background: '#FFF',
                                                              boxShadow: 'none',
                                                            opacity: 1,
                                                            cursor: 'default'
                                                          }}
                                                        >
                                                          <div className="flex items-center justify-between w-full">
                                                            <span style={{
                                                              color: 'var(--Monochrome-Black, #232323)',
                                                              fontFamily: '"Aeonik Pro", sans-serif',
                                                              fontSize: '14px',
                                                              fontStyle: 'normal',
                                                              fontWeight: 400,
                                                              lineHeight: '20px',
                                                              marginRight: '8px'
                                                            }}>
                                                              {action.label}
                                                            </span>
                                                          </div>
                                                          <div className="flex items-center gap-2">
                                                            {/* Show agent icon at the beginning of description */}
                                                            {action.agentName && (
                                                              <div 
                                                                className={`w-6 h-6 rounded-full flex items-center justify-center p-1 flex-shrink-0 ${getAgentCircleColor(action.agentName)} ${getIconTextColor(action.agentName)}`}
                                                              >
                                                                {getAgentIcon(action.agentName)}
                                                              </div>
                                                            )}
                                                            <div className="text-sm text-slate-700">{action.prompt || action.description}</div>
                                                          </div>
                                                        </div>
                                                      ))}
                                                    </div>
                                                  )}
                                                </div>
                                              </div>
                                            </div>
                                          ))}
                                        </div>
                                      )}
                                    </div>
                                  );
                                })}
                                  {isLoading && hasScenarios && (
                                    <div className="flex items-center justify-center py-6 mb-6">
                                    <div className="animate-spin h-6 w-6 border-2 border-blue-500 border-t-transparent rounded-full mr-2"></div>
                                    <span className="text-gray-500">Streaming more scenarios...</span>
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                            
                            {/* Badge component - using remaining 30% width */}
                            <div className="hidden lg:block w-full lg:w-[30%] bg-white border border-gray-200 rounded-lg p-6 h-fit sticky top-0 lg:ml-2">
                              <div>
                                <div className="flex items-center justify-between mb-4">
                                  <h3 className="text-lg font-bold text-gray-900 pr-2 flex-grow">
                                    AI Agents at your service
                                  </h3>
                                  
                                  <div className="w-16 h-16 flex-shrink-0">
                                    <svg width="64" height="64" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <rect x="10" y="10" width="55" height="60" rx="4" fill="white" stroke="#333" strokeWidth="2"/>
                                      <path d="M15 20L55 20" stroke="#333" strokeWidth="1.5" strokeLinecap="round"/>
                                      <path d="M15 30L55 30" stroke="#333" strokeWidth="1.5" strokeLinecap="round"/>
                                      <path d="M15 40L55 40" stroke="#333" strokeWidth="1.5" strokeLinecap="round"/>
                                      <path d="M15 50L40 50" stroke="#333" strokeWidth="1.5" strokeLinecap="round"/>
                                      <path d="M20 15L25 15" stroke="#333" strokeWidth="1.5" strokeLinecap="round"/>
                                      <path d="M30 15L35 15" stroke="#333" strokeWidth="1.5" strokeLinecap="round"/>
                                      <path d="M40 15L45 15" stroke="#333" strokeWidth="1.5" strokeLinecap="round"/>
                                      <rect x="45" y="45" width="20" height="10" rx="2" fill="#FED770"/>
                                      <path d="M50 55L45 65" stroke="#333" strokeWidth="2" strokeLinecap="round"/>
                                      <path d="M30 65L60 35" stroke="#333" strokeWidth="10" strokeLinecap="round"/>
                                      <path d="M30 65L60 35" stroke="white" strokeWidth="6" strokeLinecap="round"/>
                                    </svg>
                                  </div>
                                </div>
                                
                                <ul className="space-y-3 mt-4">
                                  {isLoading ? (
                                    <>
                                      <li className="flex items-center">
                                        <div className="w-5 h-5 rounded-full bg-gray-300 animate-pulse mr-3 flex-shrink-0"></div>
                                        <div className="h-4 bg-gray-300 rounded animate-pulse w-40"></div>
                                      </li>
                                      
                                      <li className="flex items-center">
                                        <div className="w-5 h-5 rounded-full bg-gray-300 animate-pulse mr-3 flex-shrink-0"></div>
                                        <div className="h-4 bg-gray-300 rounded animate-pulse w-48"></div>
                                      </li>
                                      
                                      <li className="flex items-center">
                                        <div className="w-5 h-5 rounded-full bg-gray-300 animate-pulse mr-3 flex-shrink-0"></div>
                                        <div className="h-4 bg-gray-300 rounded animate-pulse w-56"></div>
                                      </li>
                                      
                                      <li className="flex items-center">
                                        <div className="w-5 h-5 rounded-full bg-gray-300 animate-pulse mr-3 flex-shrink-0"></div>
                                        <div className="h-4 bg-gray-300 rounded animate-pulse w-32"></div>
                                      </li>
                                    </>
                                  ) : (
                                    <>
                                      {/* Show only agents that are mentioned in the current scenario */}
                                      {(() => {
                                        // Extract unique agent names from all actions in all scenarios
                                        const mentionedAgents = new Set<string>();
                                        displayScenarios.forEach((scenario: any) => {
                                          const steps = scenario.steps && Array.isArray(scenario.steps)
                                            ? scenario.steps
                                            : scenario.actions && Array.isArray(scenario.actions)
                                              ? [{
                                                  title: scenario.title,
                                                  description: scenario.description,
                                                  actions: scenario.actions
                                                }]
                                              : [];
                                          
                                          steps.forEach((step: any) => {
                                            if (step.actions && Array.isArray(step.actions)) {
                                              step.actions.forEach((action: any) => {
                                                if (action.agentName) {
                                                  mentionedAgents.add(action.agentName);
                                                }
                                              });
                                            }
                                          });
                                        });
                                        
                                        // Convert to array and map to display
                                        return Array.from(mentionedAgents).map((agentName, index) => {
                                          const description = getShortAgentDescription(agentName);
                                          
                                          return (
                                            <li key={index} className="flex items-start">
                                              <div 
                                                className={`w-6 h-6 rounded-full flex items-center justify-center mr-3 flex-shrink-0 mt-0.5 p-1 ${getAgentCircleColor(agentName)} ${getIconTextColor(agentName)}`}
                                              >
                                                {getAgentIcon(agentName)}
                                              </div>
                                              <div className="flex flex-col">
                                                <span className="text-gray-900 text-sm font-medium">{agentName}</span>
                                                <span className="text-gray-600 text-xs leading-relaxed">{description}</span>
                                              </div>
                                            </li>
                                          );
                                        });
                                      })()}
                                    </>
                                  )}
                                </ul>
                              </div>
                              
                              {/* Description block below the badge */}
                              <div className="mt-6">
                                <p className="text-gray-700 text-xs leading-relaxed">
                                  <span className="font-medium">Sequential AI Processing:</span> Your scenario will be processed through our best neural networks in sequence, with each agent contributing their specialized expertise to deliver optimal results tailored to your specific needs.
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      ) : null}
                  </div>
                )}
                
                {/* Footer with buttons */}
                <div className="w-full flex justify-between gap-3 bg-white px-3 sm:px-6 py-4 mt-auto flex-shrink-0">
                  {isLoading ? (
                    <div className="flex justify-center w-full">
                      <Button 
                        onClick={() => stop()}
                        variant="destructive"
                        className="flex items-center gap-2"
                        style={{
                          height: '40px',
                          padding: '10px 16px'
                        }}
                      >
                        <Square className="h-4 w-4" />
                        <span>Stop Generation</span>
                      </Button>
                    </div>
                  ) : hasScenarios ? (
                    <>
                      <div className="flex justify-center w-full gap-3">
                        <button
                          onClick={handleStartAgain}
                          style={{
                            height: '40px',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                            padding: '10px 16px',
                            borderRadius: '8px',
                            border: '1px solid var(--light)',
                            background: 'var(--white)',
                            color: 'var(--Monochrome-Black, #232323)',
                            fontSize: '14px',
                            fontWeight: 400,
                            transition: 'all 0.2s ease-in-out',
                            cursor: 'pointer'
                          }}
                          onMouseOver={(e) => {
                            e.currentTarget.style.background = 'var(--superlight)';
                            e.currentTarget.style.borderColor = 'var(--normal)';
                          }}
                          onMouseOut={(e) => {
                            e.currentTarget.style.background = 'var(--white)';
                            e.currentTarget.style.borderColor = 'var(--light)';
                          }}
                        >
                          Start Again
                        </button>
                        
                        <Button
                          onClick={handleRunScenario}
                          className="text-black"
                          style={{
                            display: 'flex',
                            padding: '10px 16px',
                            height: '40px',
                            justifyContent: 'center',
                            alignItems: 'center',
                            gap: '8px',
                            alignSelf: 'stretch',
                            borderRadius: '8px',
                            background: 'var(--Yellow-Normal, #FED770)'
                          }}
                        >
                          Run Scenario
                        </Button>
                      </div>
                    </>
                  ) : (
                    <div className="flex justify-center w-full gap-3">
                      <Button
                        onClick={handleCreateScenario}
                        disabled={!userPrompt.trim() || isRecording || isTranscribing}
                        className="text-white flex items-center gap-2"
                        style={{
                          height: '40px',
                          display: 'flex',
                          justifyContent: 'center',
                          alignItems: 'center',
                          padding: '10px 16px',
                          borderRadius: '8px',
                          background: '#232323',
                          border: 'none'
                        }}
                      >
                        {isLoading ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                          <PlusIcon className="h-4 w-4" />
                        )}
                        <span>Create Scenario</span>
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </>
  );
} 